{"version":3,"file":"959.index.js","mappings":"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","sources":["webpack://snyk/./src/lib/monitor/count-total-deps-in-tree.ts","webpack://snyk/./src/lib/monitor/drop-empty-deps.ts","webpack://snyk/./src/lib/monitor/filter-out-missing-deps.ts","webpack://snyk/./src/lib/monitor/index.ts","webpack://snyk/./src/lib/monitor/prune-dep-tree.ts","webpack://snyk/./src/lib/monitor/utils.ts","webpack://snyk/./src/lib/project-metadata/types.ts"],"sourcesContent":["import { DepTree } from '../types';\n\nexport function countTotalDependenciesInTree(depTree: DepTree): number {\n  let count = 0;\n  if (depTree.dependencies) {\n    for (const name of Object.keys(depTree.dependencies)) {\n      const dep = depTree.dependencies[name];\n      if (dep) {\n        count += 1 + countTotalDependenciesInTree(dep);\n      }\n    }\n  }\n  return count;\n}\n","import { DepTree } from '../types';\n\nexport function dropEmptyDeps(depTree: DepTree) {\n  if (depTree.dependencies) {\n    const keys = Object.keys(depTree.dependencies);\n    if (keys.length === 0) {\n      delete depTree.dependencies;\n    } else {\n      for (const k of keys) {\n        dropEmptyDeps(depTree.dependencies[k]);\n      }\n    }\n  }\n  return depTree;\n}\n","import { DepTree } from '../types';\n\ninterface FilteredDepTree {\n  filteredDepTree: DepTree;\n  missingDeps: string[];\n}\n\nexport function filterOutMissingDeps(depTree: DepTree): FilteredDepTree {\n  const filteredDeps = {};\n  const missingDeps: string[] = [];\n\n  if (!depTree.dependencies) {\n    return {\n      filteredDepTree: depTree,\n      missingDeps,\n    };\n  }\n\n  for (const depKey of Object.keys(depTree.dependencies)) {\n    const dep = depTree.dependencies[depKey];\n    if (\n      (dep as any).missingLockFileEntry ||\n      ((dep as any).labels && (dep as any).labels.missingLockFileEntry)\n    ) {\n      // TODO(kyegupov): add field to the type\n      missingDeps.push(`${dep.name}@${dep.version}`);\n    } else {\n      filteredDeps[depKey] = dep;\n    }\n  }\n  const filteredDepTree: DepTree = {\n    ...depTree,\n    dependencies: filteredDeps,\n  };\n\n  return {\n    filteredDepTree,\n    missingDeps,\n  };\n}\n","import * as Debug from 'debug';\nimport * as path from 'path';\nimport * as depGraphLib from '@snyk/dep-graph';\nimport * as snyk from '..';\nimport { apiOrOAuthTokenExists, getAuthHeader } from '../api-token';\nimport { makeRequest } from '../request';\nimport config from '../config';\nimport * as os from 'os';\nconst get = require('lodash.get');\nimport { isCI } from '../is-ci';\nimport * as analytics from '../analytics';\nimport {\n  DepTree,\n  MonitorMeta,\n  MonitorResult,\n  PolicyOptions,\n  MonitorOptions,\n  Options,\n  Contributor,\n} from '../types';\nimport * as projectMetadata from '../project-metadata';\nimport {\n  MonitorError,\n  ConnectionTimeoutError,\n  FailedToRunTestError,\n} from '../errors';\nimport { pruneGraph } from '../prune';\nimport { GRAPH_SUPPORTED_PACKAGE_MANAGERS } from '../package-managers';\nimport { countTotalDependenciesInTree } from './count-total-deps-in-tree';\nimport { filterOutMissingDeps } from './filter-out-missing-deps';\nimport { dropEmptyDeps } from './drop-empty-deps';\nimport { pruneTree } from './prune-dep-tree';\nimport { findAndLoadPolicy } from '../policy';\nimport { PluginMetadata } from '@snyk/cli-interface/legacy/plugin';\nimport {\n  CallGraph,\n  CallGraphError,\n  ScannedProject,\n} from '@snyk/cli-interface/legacy/common';\nimport { isGitTarget } from '../project-metadata/types';\nimport { serializeCallGraphWithMetrics } from '../reachable-vulns';\nimport {\n  getNameDepTree,\n  getNameDepGraph,\n  getProjectName,\n  getTargetFile,\n} from './utils';\nimport { countPathsToGraphRoot } from '../utils';\nimport * as alerts from '../alerts';\nimport { abridgeErrorMessage } from '../error-format';\n\nconst debug = Debug('snyk');\n\nconst ANALYTICS_PAYLOAD_MAX_LENGTH = 1024;\n\ninterface MonitorBody {\n  meta: Meta;\n  policy: string;\n  package?: DepTree;\n  callGraph?: CallGraph;\n  target: {};\n  targetFileRelativePath: string;\n  targetFile: string;\n  contributors?: Contributor[];\n}\n\ninterface Meta {\n  method?: string;\n  hostname: string;\n  id: string;\n  ci: boolean;\n  pid: number;\n  node: string;\n  master: boolean;\n  name: string;\n  version: string;\n  org?: string;\n  pluginName: string;\n  pluginRuntime: string;\n  dockerImageId?: string;\n  dockerBaseImage?: string;\n  projectName: string;\n}\n\nexport async function monitor(\n  root: string,\n  meta: MonitorMeta,\n  scannedProject: ScannedProject,\n  options: Options & MonitorOptions & PolicyOptions,\n  pluginMeta: PluginMetadata,\n  targetFileRelativePath?: string,\n  contributors?: Contributor[],\n): Promise<MonitorResult> {\n  apiOrOAuthTokenExists();\n\n  const packageManager = meta.packageManager;\n  analytics.add('packageManager', packageManager);\n  analytics.add('isDocker', !!meta.isDocker);\n\n  if (scannedProject.depGraph) {\n    return await monitorDepGraph(\n      root,\n      meta,\n      scannedProject,\n      pluginMeta,\n      options,\n      targetFileRelativePath,\n      contributors,\n    );\n  }\n\n  if (GRAPH_SUPPORTED_PACKAGE_MANAGERS.includes(packageManager)) {\n    return await monitorDepGraphFromDepTree(\n      root,\n      meta,\n      scannedProject,\n      pluginMeta,\n      options,\n      targetFileRelativePath,\n      contributors,\n    );\n  }\n\n  return await monitorDepTree(\n    root,\n    meta,\n    scannedProject,\n    pluginMeta,\n    options,\n    targetFileRelativePath,\n    contributors,\n  );\n}\n\nasync function monitorDepTree(\n  root: string,\n  meta: MonitorMeta,\n  scannedProject: ScannedProject,\n  pluginMeta: PluginMetadata,\n  options: MonitorOptions & PolicyOptions,\n  targetFileRelativePath?: string,\n  contributors?: Contributor[],\n): Promise<MonitorResult> {\n  let treeMissingDeps: string[] = [];\n\n  const packageManager = meta.packageManager;\n\n  let depTree = scannedProject.depTree;\n\n  if (!depTree) {\n    debug(\n      'scannedProject is missing depGraph or depTree, cannot run test/monitor',\n    );\n    throw new FailedToRunTestError(\n      'Your monitor request could not be completed. Please email support@snyk.io',\n    );\n  }\n\n  let prePruneDepCount;\n  if (meta.prune) {\n    debug('prune used, counting total dependencies');\n    prePruneDepCount = countTotalDependenciesInTree(depTree);\n    analytics.add('prePruneDepCount', prePruneDepCount);\n    debug('total dependencies: %d', prePruneDepCount);\n    debug('pruning dep tree');\n    depTree = await pruneTree(depTree, meta.packageManager);\n    debug('finished pruning dep tree');\n  }\n  if (['npm', 'yarn'].includes(meta.packageManager)) {\n    const { filteredDepTree, missingDeps } = filterOutMissingDeps(depTree);\n    depTree = filteredDepTree;\n    treeMissingDeps = missingDeps;\n  }\n\n  let targetFileDir;\n\n  if (targetFileRelativePath) {\n    const { dir } = path.parse(targetFileRelativePath);\n    targetFileDir = dir;\n  }\n\n  const policy = await findAndLoadPolicy(\n    root,\n    meta.isDocker ? 'docker' : packageManager!,\n    options,\n    depTree,\n    targetFileDir,\n  );\n\n  const target = await projectMetadata.getInfo(scannedProject, meta, depTree);\n\n  if (isGitTarget(target) && target.branch) {\n    analytics.add('targetBranch', target.branch);\n  }\n\n  depTree = dropEmptyDeps(depTree);\n\n  let callGraphPayload;\n  if (\n    options.reachableVulns &&\n    (scannedProject.callGraph as CallGraphError)?.innerError\n  ) {\n    const err = scannedProject.callGraph as CallGraphError;\n    analytics.add(\n      'callGraphError',\n      abridgeErrorMessage(\n        err.innerError.toString(),\n        ANALYTICS_PAYLOAD_MAX_LENGTH,\n      ),\n    );\n    alerts.registerAlerts([\n      {\n        type: 'error',\n        name: 'missing-call-graph',\n        msg: err.message,\n      },\n    ]);\n  } else if (scannedProject.callGraph) {\n    const { callGraph, nodeCount, edgeCount } = serializeCallGraphWithMetrics(\n      scannedProject.callGraph as CallGraph,\n    );\n    debug(\n      `Adding call graph to payload, node count: ${nodeCount}, edge count: ${edgeCount}`,\n    );\n\n    const callGraphMetrics = get(pluginMeta, 'meta.callGraphMetrics', {});\n    analytics.add('callGraphMetrics', {\n      callGraphEdgeCount: edgeCount,\n      callGraphNodeCount: nodeCount,\n      ...callGraphMetrics,\n    });\n    callGraphPayload = callGraph;\n  }\n\n  if (!depTree) {\n    debug(\n      'scannedProject is missing depGraph or depTree, cannot run test/monitor',\n    );\n    throw new FailedToRunTestError(\n      'Your monitor request could not be completed. Please email support@snyk.io',\n    );\n  }\n\n  const { res, body } = await makeRequest({\n    body: {\n      meta: {\n        method: meta.method,\n        hostname: os.hostname(),\n        id: snyk.id || depTree.name,\n        ci: isCI(),\n        pid: process.pid,\n        node: process.version,\n        master: snyk.config.isMaster,\n        name: getNameDepTree(scannedProject, depTree, meta),\n        version: depTree.version,\n        org: config.org ? decodeURIComponent(config.org) : undefined,\n        pluginName: pluginMeta.name,\n        pluginRuntime: pluginMeta.runtime,\n        missingDeps: treeMissingDeps,\n        dockerImageId: pluginMeta.dockerImageId,\n        dockerBaseImage: depTree.docker ? depTree.docker.baseImage : undefined,\n        dockerfileLayers: depTree.docker\n          ? depTree.docker.dockerfileLayers\n          : undefined,\n        projectName: getProjectName(scannedProject, meta),\n        prePruneDepCount, // undefined unless 'prune' is used,\n        monitorGraph: false,\n        versionBuildInfo: JSON.stringify(scannedProject.meta?.versionBuildInfo),\n        gradleProjectName: scannedProject.meta?.gradleProjectName,\n        platform: scannedProject.meta?.platform,\n      },\n      policy: policy ? policy.toString() : undefined,\n      package: depTree,\n      callGraph: callGraphPayload,\n      // we take the targetFile from the plugin,\n      // because we want to send it only for specific package-managers\n      target,\n      // WARNING: be careful changing this as it affects project uniqueness\n      targetFile: getTargetFile(scannedProject, pluginMeta),\n      targetFileRelativePath,\n      contributors,\n    } as MonitorBody,\n    gzip: true,\n    method: 'PUT',\n    headers: {\n      authorization: getAuthHeader(),\n      'content-encoding': 'gzip',\n    },\n    url: config.API + '/monitor/' + packageManager,\n    json: true,\n  });\n\n  if (res.statusCode && res.statusCode >= 200 && res.statusCode <= 299) {\n    return body as MonitorResult;\n  } else {\n    const userMessage = body && body.userMessage;\n    if (!userMessage && res.statusCode === 504) {\n      throw new ConnectionTimeoutError();\n    } else {\n      throw new MonitorError(res.statusCode, userMessage);\n    }\n  }\n}\n\nexport async function monitorDepGraph(\n  root: string,\n  meta: MonitorMeta,\n  scannedProject: ScannedProject,\n  pluginMeta: PluginMetadata,\n  options: MonitorOptions & PolicyOptions,\n  targetFileRelativePath?: string,\n  contributors?: Contributor[],\n): Promise<MonitorResult> {\n  const packageManager = meta.packageManager;\n  analytics.add('monitorDepGraph', true);\n\n  let depGraph = scannedProject.depGraph;\n\n  if (!depGraph) {\n    debug(\n      'scannedProject is missing depGraph or depTree, cannot run test/monitor',\n    );\n    throw new FailedToRunTestError(\n      'Your monitor request could not be completed. Please email support@snyk.io',\n    );\n  }\n\n  let targetFileDir;\n\n  if (targetFileRelativePath) {\n    const { dir } = path.parse(targetFileRelativePath);\n    targetFileDir = dir;\n  }\n\n  const policy = await findAndLoadPolicy(\n    root,\n    meta.isDocker ? 'docker' : packageManager!,\n    options,\n    undefined,\n    targetFileDir,\n  );\n\n  const target = await projectMetadata.getInfo(scannedProject, meta);\n  if (isGitTarget(target) && target.branch) {\n    analytics.add('targetBranch', target.branch);\n  }\n\n  const pruneIsRequired = options.pruneRepeatedSubdependencies;\n  depGraph = await pruneGraph(depGraph, packageManager, pruneIsRequired);\n\n  let callGraphPayload;\n  if (\n    options.reachableVulns &&\n    (scannedProject.callGraph as CallGraphError)?.innerError\n  ) {\n    const err = scannedProject.callGraph as CallGraphError;\n    analytics.add(\n      'callGraphError',\n      abridgeErrorMessage(\n        err.innerError.toString(),\n        ANALYTICS_PAYLOAD_MAX_LENGTH,\n      ),\n    );\n    alerts.registerAlerts([\n      {\n        type: 'error',\n        name: 'missing-call-graph',\n        msg: err.message,\n      },\n    ]);\n  } else if (scannedProject.callGraph) {\n    const { callGraph, nodeCount, edgeCount } = serializeCallGraphWithMetrics(\n      scannedProject.callGraph as CallGraph,\n    );\n    debug(\n      `Adding call graph to payload, node count: ${nodeCount}, edge count: ${edgeCount}`,\n    );\n\n    const callGraphMetrics = get(pluginMeta, 'meta.callGraphMetrics', {});\n    analytics.add('callGraphMetrics', {\n      callGraphEdgeCount: edgeCount,\n      callGraphNodeCount: nodeCount,\n      ...callGraphMetrics,\n    });\n    callGraphPayload = callGraph;\n  }\n\n  if (!depGraph) {\n    debug(\n      'scannedProject is missing depGraph or depTree, cannot run test/monitor',\n    );\n    throw new FailedToRunTestError(\n      'Your monitor request could not be completed. Please email support@snyk.io',\n    );\n  }\n\n  const { res, body } = await makeRequest({\n    body: {\n      meta: {\n        method: meta.method,\n        hostname: os.hostname(),\n        id: snyk.id || depGraph.rootPkg.name,\n        ci: isCI(),\n        pid: process.pid,\n        node: process.version,\n        master: snyk.config.isMaster,\n        name: getNameDepGraph(scannedProject, depGraph, meta),\n        version: depGraph.rootPkg.version,\n        org: config.org ? decodeURIComponent(config.org) : undefined,\n        pluginName: pluginMeta.name,\n        pluginRuntime: pluginMeta.runtime,\n        projectName: getProjectName(scannedProject, meta),\n        monitorGraph: true,\n        versionBuildInfo: JSON.stringify(scannedProject.meta?.versionBuildInfo),\n        gradleProjectName: scannedProject.meta?.gradleProjectName,\n      },\n      policy: policy ? policy.toString() : undefined,\n      depGraphJSON: depGraph, // depGraph will be auto serialized to JSON on send\n      // we take the targetFile from the plugin,\n      // because we want to send it only for specific package-managers\n      target,\n      targetFile: getTargetFile(scannedProject, pluginMeta),\n      targetFileRelativePath,\n      contributors,\n      callGraph: callGraphPayload,\n    } as MonitorBody,\n    gzip: true,\n    method: 'PUT',\n    headers: {\n      authorization: getAuthHeader(),\n      'content-encoding': 'gzip',\n    },\n    url: `${config.API}/monitor/${packageManager}/graph`,\n    json: true,\n  });\n\n  if (res.statusCode && res.statusCode >= 200 && res.statusCode <= 299) {\n    return body as MonitorResult;\n  } else {\n    const userMessage = body && body.userMessage;\n    if (!userMessage && res.statusCode === 504) {\n      throw new ConnectionTimeoutError();\n    } else {\n      throw new MonitorError(res.statusCode, userMessage);\n    }\n  }\n}\n\nasync function monitorDepGraphFromDepTree(\n  root: string,\n  meta: MonitorMeta,\n  scannedProject: ScannedProject,\n  pluginMeta: PluginMetadata,\n  options: MonitorOptions & PolicyOptions,\n  targetFileRelativePath?: string,\n  contributors?: Contributor[],\n): Promise<MonitorResult> {\n  const packageManager = meta.packageManager;\n\n  let treeMissingDeps: string[] | undefined;\n  let depTree = scannedProject.depTree;\n\n  if (!depTree) {\n    debug(\n      'scannedProject is missing depGraph or depTree, cannot run test/monitor',\n    );\n    throw new FailedToRunTestError(\n      'Your monitor request could not be completed. Please email support@snyk.io',\n    );\n  }\n\n  let targetFileDir;\n\n  if (targetFileRelativePath) {\n    const { dir } = path.parse(targetFileRelativePath);\n    targetFileDir = dir;\n  }\n\n  const policy = await findAndLoadPolicy(\n    root,\n    meta.isDocker ? 'docker' : packageManager!,\n    options,\n    // TODO: fix this and send only send when we used resolve-deps for node\n    // it should be a ExpandedPkgTree type instead\n    depTree,\n    targetFileDir,\n  );\n\n  if (['npm', 'yarn'].includes(meta.packageManager)) {\n    const { filteredDepTree, missingDeps } = filterOutMissingDeps(depTree);\n    depTree = filteredDepTree;\n    treeMissingDeps = missingDeps;\n  }\n\n  const depGraph: depGraphLib.DepGraph = await depGraphLib.legacy.depTreeToGraph(\n    depTree,\n    packageManager,\n  );\n  const target = await projectMetadata.getInfo(scannedProject, meta, depTree);\n\n  if (isGitTarget(target) && target.branch) {\n    analytics.add('targetBranch', target.branch);\n  }\n\n  let prunedGraph = depGraph;\n  let prePruneDepCount;\n  if (meta.prune) {\n    debug('Trying to prune the graph');\n    prePruneDepCount = countPathsToGraphRoot(depGraph);\n    debug('pre prunedPathsCount: ' + prePruneDepCount);\n    prunedGraph = await pruneGraph(depGraph, packageManager, meta.prune);\n  }\n\n  if (!depTree) {\n    debug(\n      'scannedProject is missing depGraph or depTree, cannot run test/monitor',\n    );\n    throw new FailedToRunTestError(\n      'Your monitor request could not be completed. Please email support@snyk.io',\n    );\n  }\n  const { res, body } = await makeRequest({\n    body: {\n      meta: {\n        method: meta.method,\n        hostname: os.hostname(),\n        id: snyk.id || depTree.name,\n        ci: isCI(),\n        pid: process.pid,\n        node: process.version,\n        master: snyk.config.isMaster,\n        name: getNameDepGraph(scannedProject, depGraph, meta),\n        version: depGraph.rootPkg.version,\n        org: config.org ? decodeURIComponent(config.org) : undefined,\n        pluginName: pluginMeta.name,\n        pluginRuntime: pluginMeta.runtime,\n        dockerImageId: pluginMeta.dockerImageId,\n        dockerBaseImage: depTree.docker ? depTree.docker.baseImage : undefined,\n        dockerfileLayers: depTree.docker\n          ? depTree.docker.dockerfileLayers\n          : undefined,\n        projectName: getProjectName(scannedProject, meta),\n        prePruneDepCount, // undefined unless 'prune' is used\n        missingDeps: treeMissingDeps,\n        monitorGraph: true,\n      },\n      policy: policy ? policy.toString() : undefined,\n      depGraphJSON: prunedGraph, // depGraph will be auto serialized to JSON on send\n      // we take the targetFile from the plugin,\n      // because we want to send it only for specific package-managers\n      target,\n      targetFile: getTargetFile(scannedProject, pluginMeta),\n      targetFileRelativePath,\n      contributors,\n    } as MonitorBody,\n    gzip: true,\n    method: 'PUT',\n    headers: {\n      authorization: getAuthHeader(),\n      'content-encoding': 'gzip',\n    },\n    url: `${config.API}/monitor/${packageManager}/graph`,\n    json: true,\n  });\n\n  if (res.statusCode && res.statusCode >= 200 && res.statusCode <= 299) {\n    return body as MonitorResult;\n  } else {\n    const userMessage = body && body.userMessage;\n    if (!userMessage && res.statusCode === 504) {\n      throw new ConnectionTimeoutError();\n    } else {\n      throw new MonitorError(res.statusCode, userMessage);\n    }\n  }\n}\n","import * as depGraphLib from '@snyk/dep-graph';\nimport { DepTree } from '../types';\n\nexport async function pruneTree(\n  tree: DepTree,\n  packageManagerName: string,\n): Promise<DepTree> {\n  // Pruning requires conversion to the graph first.\n  // This is slow.\n  const graph = await depGraphLib.legacy.depTreeToGraph(\n    tree,\n    packageManagerName,\n  );\n  const prunedTree: DepTree = (await depGraphLib.legacy.graphToDepTree(\n    graph,\n    packageManagerName,\n    { deduplicateWithinTopLevelDeps: true },\n  )) as DepTree;\n  // Transplant pruned dependencies in the original tree (we want to keep all other fields):\n  tree.dependencies = prunedTree.dependencies;\n  return tree;\n}\n","import { ScannedProject, DepTree } from '@snyk/cli-interface/legacy/common';\nimport {\n  getContainerTargetFile,\n  getContainerProjectName,\n  getContainerName,\n  isContainer,\n} from '../container';\nimport * as depGraphLib from '@snyk/dep-graph';\nimport { MonitorMeta } from '../types';\nimport { PluginMetadata } from '@snyk/cli-interface/legacy/plugin';\n\nexport function getNameDepTree(\n  scannedProject: ScannedProject,\n  depTree: DepTree,\n  meta: MonitorMeta,\n): string | undefined {\n  if (isContainer(scannedProject)) {\n    return getContainerName(scannedProject, meta);\n  }\n  return depTree.name;\n}\n\nexport function getNameDepGraph(\n  scannedProject: ScannedProject,\n  depGraph: depGraphLib.DepGraph,\n  meta: MonitorMeta,\n): string | undefined {\n  if (isContainer(scannedProject)) {\n    return getContainerName(scannedProject, meta);\n  }\n  return depGraph.rootPkg?.name;\n}\n\nexport function getProjectName(\n  scannedProject: ScannedProject,\n  meta: MonitorMeta,\n): string | undefined {\n  if (isContainer(scannedProject)) {\n    return getContainerProjectName(scannedProject, meta);\n  }\n\n  if (meta['project-name'] && scannedProject.meta?.projectName) {\n    return scannedProject.meta.projectName;\n  }\n\n  return meta['project-name'];\n}\n\nexport function getTargetFile(\n  scannedProject: ScannedProject,\n  pluginMeta: PluginMetadata,\n): string | undefined {\n  if (isContainer(scannedProject)) {\n    return getContainerTargetFile(scannedProject);\n  }\n  return pluginMeta.targetFile;\n}\n","export interface GitTarget {\n  remoteUrl?: string;\n  branch?: string;\n}\n\nexport interface ContainerTarget {\n  image?: string;\n}\n\nexport function isGitTarget(target: any): target is GitTarget {\n  return target && (target.branch || target.remoteUrl);\n}\n"],"names":[],"sourceRoot":""}